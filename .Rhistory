setwd("D:/Han/23-Project1-R")
setwd("D:/Han/23-Project1-R")
3+(4*5)
A <- 51:80
print(A)
print(A)
3+(5*2)
3+(5*2)
a <- 51:80
print(a)
3+(5*2)
a <- 51:80
print(a)
print(B)
print(a)
3+(5*2); a <- 51:80; print(a)
library(ggplot2)
library(cowsay)
say("Hello wolrd", by="cat")
say("Hello wolrd", by="snow")
Sys.time()

3+(5*2); a <- 51:80; print(a)
library(ggplot2)
library(cowsay)
say("Hello wolrd", by="cat")
say("Hello wolrd", by="snow")
Sys.time()
total <- 3030
total
print(total)
cat("total: ", total)
print("total: ")
a <- 2
b <- 30
a+b
print(a+b)
 a <-50
 c <- a+b
 print(c)

 #vector c
 #?��?�� 개의 ?��?���? ??�?��?�� ?�� ?��?��.
 #?��차원 배열?��?��고도 ?��?��.
 
 score <- c(23,45,76,23,876,56.23)
 mean(score) #?���? 출력
 foo <- c(20,34,65,16,98,58)
 mean(foo)
 v1 <-c(1:100) # 1-100까�?� ??�?��
v1  
v2 <- c(1,2, 1:10)
v2
v3 <-seq(1,101,5)
v3
v4 <- rep(1, times = 5)
v4
v6 <- rep(c('a','b','c'),each =3)
v6

#?��?��
absent <-c(3,4,5,6)
absent
names(absent)
names(absent) <-c('mon','tue','wed','thu')
absent[3]

v1[c(1,3,5)]
v1[3:12]
v1[-2]
v1[-c(5:90)]

sales <- c(1,2,3,4)
names(sales)
names(sales)<- c('m1','m2','m3','m4')
sales

v1[2] <-3
v1[c(1,5)]<-c(10,20)
v1
absent[1] <-100
absent [c(1,2)]<-c(3,4)
absent
absent[3:4] <-c(30,70)

#foo <- paste(1:12,sep ='?��') ?���? ?��?��

foo <- paste(1:12,seq ='?��')
foo <-paste(1:12,'?��',sep='')

#벡터?�� ?��?��

#20230330

ls() # ?��?�� 리스?�� ?��?�� list
rm(foo) #?��?�� ?���? remove
rm(list = ls()) #모든 ?��?�� ?���?

# 116p

#==============20230330===============================
ls() # 함수 리스트 확인 list
rm(foo) #함수 제거 remove
rm(list = ls()) #모든 함수 제거
# 116p

d <- c(1,2,3,4,5)
2*d
d-5
3*d+4 #일회성, 결과값 출력 

d <-d*2 #영구적
d <- d*4

rm(d)

x <- c(1,2,3,4)
y <- c(5,6,7,8)
x +y  # 같은 인덱스끼리 더함
x*y
z <-x+y
z
rm(y)
y <-c(5,6,7)
x +y # 두 벡터의 길이가 같지 않으면 불가능 함, 125p
y <- c('a','c','b','d')
x +y # 값의 종류가 다르면 불가능함
m <-c(x,y) #문자열이 섞여있어 전부 문자화 됨
m <- c( y,x)
p <- c(32,45,y,x,'apple') 
y <-c(5,6,7,8)
m <-c(x,y)
#127 벡터에 적용 가능한 함수 
sum(x) 
mean(x)
length(x)
sort(x)
range(x)
sort (x, decreasing = TRUE) #내림차순
#130p 연산자
sum (x)==-sum(y) #FALSE
sum (x)!=-sum(y) #TRUE
d <- 1:9
d >=5 #5보다 크거나 같은 것
d[d>5] # 5보다 큰 것
d[ 2<d & d<7] # 2보다 크고 7보다 작은
sum (d>5) #5보다 큰 값의 개수를 출력
x <- sum(d>5) #x에 4(5보다 큰 값의 개수)가 들어감 
d[d>5]
sum(d[d>5]) #일정 구간만 더해주는 
1 == FALSE
1 == TRUE
#133p
x <-c(4,5)
y<- c(63,68)
sale.x <-2 *x
sale.y <-2.5 *y
sale.x
sale.y
sale.day <- sale.x + sale.y
sale.day
names(sale.day) <-c('MON','tue')
sale.day
sum(sale.day) # 총 매출액
#135p 팩터와 리스트
bt <-c('a','b','b','ab','o')
bt
bt.new <- factor(bt) # 중북값 제외 하고 알려줌
bt.new
bt[2]
bt.new[2]
as.integer(bt.new) #펙터의 문자값을 숫자로 바꿔 출력
bt

#138p 리스트
h.list <-c('balling','tennis')
h.list
person <- list(name='Tome',age=25,student=TRUE, hobby=h.list)
person
person[1]
person[3]
person$name
person$hobby

#152p 매트릭스
z <-matrix(1:20, nrow=4, ncol=5) # 1-20 nrow=행, ncol=열
x <- 1:4
y <-5:8
m1 <- cbind (x,y)
m2 <- rbind(x,y)
m2
m3 <- rbind (m2, x)
m3
m4 <- cbind (z,x)
m4
z[2,3]
z[1:10]
z[,4]
z[2,]
z [2,1:3]
z[,c(1,4)]
z[1:2,]
z[1,c(1,2,4)]
z[,c(1,5)]

